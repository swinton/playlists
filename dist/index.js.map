{"version":3,"sources":["spotify-client.ts","load-playlist-spec.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import SpotifyWebApi from 'spotify-web-api-node';\n\nexport const getSpotifyClient = async function(clientId: string, clientSecret: string, refreshToken: string): Promise<SpotifyWebApi> {\n  // Construct client\n  const spotifyApi = new SpotifyWebApi({\n    clientId,\n    clientSecret\n  });\n\n  // Set the refresh token\n  spotifyApi.setRefreshToken(refreshToken);\n\n  // Get an access token\n  try {\n    const { body: { access_token: accessToken } } = await spotifyApi.refreshAccessToken();\n    spotifyApi.setAccessToken(accessToken);\n  } catch (e) {\n    throw(e);\n  }\n\n  return spotifyApi;\n};\n\nexport default getSpotifyClient;\n","import fs from 'fs';\nimport path from 'path';\nimport yaml from 'js-yaml';\n\nconst loadPlaylistSpec = function(path: string) {\n  // Get document, or throw exception on error\n  try {\n    return yaml.safeLoad(fs.readFileSync(path, 'utf8'));\n  } catch (e) {\n    throw e;\n  }\n};\n\nexport default loadPlaylistSpec;\n","import glob from 'glob';\n\nimport getSpotifyClient from './spotify-client';\nimport loadPlaylistSpec from './load-playlist-spec';\n\nconst clientId: string = process.env.SPOTIFY_CLIENT_ID || '';\nconst clientSecret: string = process.env.SPOTIFY_CLIENT_SECRET || '';\nconst refreshToken: string = process.env.SPOTIFY_REFRESH_TOKEN || '';\n\n(async () => {\n  try {\n    // Get Spotify client\n    const spotify = await getSpotifyClient(clientId, clientSecret, refreshToken);\n\n    glob('./playlists/*.yml', function(err, specs: string[]) {\n      // Iterate over all playlist specs\n      specs.forEach(async (spec) => {\n        // Load playlist spec\n        const playlist = loadPlaylistSpec(spec);\n\n        // Get recommendations\n        const { body: { tracks: recommendations } } = await spotify.getRecommendations(playlist.params);\n\n        // Update playlist\n        const { body: response } = await spotify.replaceTracksInPlaylist(\n          playlist.id,\n          recommendations.map(\n            recommendation => recommendation.uri\n          )\n        );\n        console.log('snapshot_id: ', (response as {snapshot_id: string}).snapshot_id);\n      });\n    });\n  } catch (e) {\n    console.log(e);\n    process.exit(1);\n  }\n})();\n"]}